async def async_hello():
print("hello, world!")
Functions defined with the async keyword are special. When called, they do not
execute the code inside but instead return a coroutine object:
>>> async def async_hello():
... print("hello, world!")
...
>>> async_hello()
<coroutine object async_hello at 0x1014129e8>
简单的说，async定义函数，创建的是一个协程对象，本身并不会执行。


The coroutine object does not do anything until its execution is scheduled in the
event loop. The asyncio module is available in order to provide the basic event
loop implementation, as well as lot of other asynchronous utilities:
>>> import asyncio
>>> async def async_hello():
... print("hello, world!")
...
>>> loop = asyncio.get_event_loop()
>>> loop.run_until_complete(async_hello())
hello, world!
>>> loop.close()


关于mysql：
1、如果出现诸如 mysql server gone away之类的，通常可以考虑连接数的问题。
我设置如下：（16核16g内存的基于vmware云的虚拟机）

max_connections = 4000
open_files_limit=4000
innodb_buffer_pool_instances=7
innodb-buffer-pool-size =14G
innodb_flush_method = O_DIRECT
table_open_cache=8000

需要配置服务器可以打开的最大文件数。否则，设置最大文件打开数或者连接数没有意义。
需要修改/lib/systemd/system/mysql.service 否则改了系统的最大文件打开数限制也没用。

Add the following lines to the bottom of the file:

LimitNOFILE=infinity
LimitMEMLOCK=infinity


真心奇怪，限制的这么少，究竟是出于什么原因？

